from random import shuffle

def first_fit(items, resources):
    # items.sort(reverse = True)
    # resources.sort(reverse = True)
    bins = []
    for i in range(len(items)):
        is_not_added = True
        if len(bins) == 0:
            for l in range(len(resources)):
                if resources[l] > items[i]:
                    bin = [0] * (len(items) + 2)
                    bin[0] = resources[l]
                    bin[1] = resources[l] - items[i]
                    bin[i + 2] = bin[i + 2] + 1
                    del resources[l]
                    bins.append(bin)
                    is_not_added = False
                    break
                else:
                    continue
        else:
            for j in range(len(bins)):
                if bins[j][1] >= items[i]:
                    bins[j][i + 2] = bins[j][i + 2] + 1
                    bins[j][1] = bins[j][1] - items[i]
                    is_not_added = False
                    break
                else:
                    continue
            if is_not_added and len(resources) > 0:
                for k in range(len(resources)):
                    if resources[k] > items[i]:
                        bin = [0] * (len(items) + 2)
                        bin[0] = resources[k]
                        bin[1] = resources[k] - items[i]
                        bin[i + 2] = bin[i + 2] + 1
                        del resources[k]
                        bins.append(bin)
                        is_not_added = False
                        break
                    else:
                        continue
    return bins

def change_worst_mutation(bins, items):
    sum_of_items = 0
    bins.sort(key=lambda bin: bin[1])
    for i in range(2, len(bins[-1])):
        if bins[-1][i] == 1:
            sum_of_items = sum_of_items + items[i - 2]
    return sum_of_items

def loss_percentage(bins):
    total_sum_resources = 0
    total_sum_loss = 0
    for i in range(len(bins)):
        total_sum_resources = total_sum_resources + bins[i][0]
        total_sum_loss = total_sum_loss + bins[i][1]
    persentage = (total_sum_loss * 100) / total_sum_resources
    return persentage


if __name__ == '__main__':
    a = [340, 340, 340, 340, 340, 340, 340, 340, 365, 365, 365,  365, 365, 365, 365, 365, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 415, 415, 415, 415]
    b = [1900, 2100, 1850, 1700, 1500, 2000, 2050, 1670, 2000, 1800, 1770, 1500, 2000]

    shuffle(a)
    shuffle(b)
    c = first_fit(a, b)
    p = loss_percentage(c)
    print(a)
    print(c)
    print(p)
    print(change_worst_mutation(c, a))



