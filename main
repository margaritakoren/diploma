import random as rnd
from random import shuffle
import copy

class CSP:

    bins = []

    def __init__(self, items, resources):
        self.resources = resources
        self.items = items
        self.bins = self.individual_init()

    def create_new_bin(self, i, resourse, item):
        bin = []
        bin.append(resourse)
        bin.append(resourse - item)
        bin.append(i)
        return bin

    def fitness_function(self, bins):
        total_sum_resources = 0
        total_sum_loss = 0
        for i in range(len(bins)):
            total_sum_resources = total_sum_resources + bins[i][0]
            total_sum_loss = total_sum_loss + bins[i][1]
        persentage = (total_sum_loss * 100) / total_sum_resources
        return persentage

    def print_individual(self):
        self.bins.sort(key=lambda bin: bin[1])
        print(self.bins)
        print(self.fitness_function(self.bins))
        print()

    def bin_sort_descending(self, bin, start_position):
        elements = bin[start_position:]
        n = len(elements)
        for j in range(0, n - 1):
            for k in range(0, n - j - 1):
                if self.items[elements[k]] < self.items[elements[k + 1]]:
                    elements[k], elements[k + 1] = elements[k + 1], elements[k]
        del bin[start_position:]
        bin.extend(elements)
        return bin

    def individual_init(self):
        # items.sort(reverse = True)
        # resources.sort(reverse = True)
        bins = []

        # Перед иниициализацией - детали и стержни перемешиваются
        shuffle(self.items)
        shuffle(self.resources)

        for i in range(len(self.items)):
            is_not_added = True
            if len(bins) == 0:
                for l in range(len(self.resources)):
                    if self.resources[l] > self.items[i]:
                        bin = self.create_new_bin(i, self.resources[l], self.items[i])
                        del self.resources[l]
                        bins.append(bin)
                        is_not_added = False
                        break
                    else:
                        continue
            else:
                for j in range(len(bins)):
                    if bins[j][1] >= self.items[i]:
                        bins[j].append(i)
                        bins[j][1] = bins[j][1] - self.items[i]
                        is_not_added = False
                        break
                    else:
                        continue
                if is_not_added and len(self.resources) > 0:
                    for k in range(len(self.resources)):
                        if self.resources[k] > self.items[i]:
                            bin = self.create_new_bin(i, self.resources[k], self.items[i])
                            del self.resources[k]
                            bins.append(bin)
                            is_not_added = False
                            break
                        else:
                            continue
        return bins

    def ramming_mutation(self):
        for k in range(len(self.bins) - 1, 0, -1):
            self.bins.sort(key=lambda bin: bin[1])
            # Мутация осуществляется между соседними бинами
            # Сортировка подлежащих мутации бинов по уменьшению длины деталей
            self.bins[k - 1] = self.bin_sort_descending(self.bins[k - 1], 2)
            if len(self.bins[k]) - 2 != 1: self.bins[k] = self.bin_sort_descending(self.bins[k], 2)

            # Проверка - возможно ли полностью переложить деталь в стержень
            if self.bins[k - 1][1] >= self.items[self.bins[k][-1]]:
                self.bins[k - 1].append(self.bins[k][-1])
                self.bins[k - 1][1] = self.bins[k - 1][1] - self.items[self.bins[k][-1]]
                self.bins[k][1] = self.bins[k][1] + self.items[self.bins[k][-1]]
                del self.bins[k][-1]
                if self.bins[k][0] == self.bins[k][1]:
                    self.resources.append(self.bins[k][0])
                    del self.bins[k]
                continue

            # Заход в цикл осуществляется только при условии, что наибольшая деталь из наименее заполненного стержня
            # больше, чем наименьшая деталь в наиболее заполненно
            if self.items[self.bins[k][2]] > self.items[self.bins[k - 1][-1]]:
                for j in range(len(self.bins[k - 1]) - 1, 1, -1):
                    current_waste = self.bins[k - 1][1]

                    if current_waste > (current_waste + self.items[self.bins[k - 1][j]] - self.items[self.bins[k][2]]) and \
                            current_waste + self.items[self.bins[k - 1][j]] - self.items[self.bins[k][2]] > 0:

                        # print('current', current_waste)
                        # print('bin2', self.items[self.bins[k - 1][j]])
                        # print('worst', self.items[self.bins[k][2]])
                        # print(current_waste + self.items[self.bins[k - 1][j]])
                        # print('new waste for bin k - 1',
                        #       current_waste + self.items[self.bins[k - 1][j]] - self.items[self.bins[k][2]])
                        # print('new waste for bin k',
                        #       self.bins[k][1] + self.items[self.bins[k][2]] - self.items[self.bins[k - 1][j]])
                        # print("")

                        self.bins[k - 1][1] = current_waste + self.items[self.bins[k - 1][j]] - self.items[self.bins[k][2]]
                        self.bins[k][1] = self.bins[k][1] + self.items[self.bins[k][2]] - self.items[self.bins[k - 1][j]]
                        self.bins[k - 1][j], self.bins[k][2] = self.bins[k][2], self.bins[k - 1][j]
                        Done = True
                        break
                    else:
                        continue

    def group_mutation(self):
        Done = False
        while Done == False:
            bins = copy.deepcopy(self.bins)
            # bins.sort(key=lambda bin: bin[1])
            mutated_bins = []
            resources_for_mutation = []

            half_of_legth = int(len(self.bins) / 2)
            random_i, random_j = rnd.randint(0, half_of_legth - 1), rnd.randint(half_of_legth, len(self.bins) - 1)

            bin_1 = bins[random_i]
            bin_2 = bins[random_j]

            # Помечаем случайные гены для их дальнейшего удаления
            bins[random_i][1], bins[random_j][1] = -1, -1

            # Формируется список ресурсов для мутации
            resources_for_mutation.append(bin_1[0])
            resources_for_mutation.append(bin_2[0])

            # Формируется список отрезков для мутации
            i_of_items = bin_1[2:]
            i_of_items.extend(bin_2[2:])

            # Список отрезков и список ресурсов - фильтруется по возрастанию
            resources_for_mutation.sort(reverse=True)
            shuffle(i_of_items)

            for i in range(len(i_of_items)):
                Added = False
                if len(mutated_bins) == 0:
                    bin = self.create_new_bin(i_of_items[i], resources_for_mutation[0], self.items[i_of_items[i]])
                    mutated_bins.append(bin)
                    del resources_for_mutation[0]
                    Added = True
                else:
                    for j in range(len(mutated_bins)):
                        if mutated_bins[j][1] >= self.items[i_of_items[i]]:
                            mutated_bins[j].append(i_of_items[i])
                            mutated_bins[j][1] = mutated_bins[j][1] - self.items[i_of_items[i]]
                            Added = True
                            break
                        else:
                            continue
                    if Added == False and len(resources_for_mutation) != 0:
                        bin = self.create_new_bin(i_of_items[i], resources_for_mutation[0], self.items[i_of_items[i]])
                        mutated_bins.append(bin)
                        del resources_for_mutation[0]
                        Added = True

            if Added: Done = True

        # Обновляем особь мутировавшими генами
        bins.sort(key=lambda bin: bin[1])
        del bins[0:2]
        bins.extend(mutated_bins)

        self.bins = bins

if __name__ == '__main__':
    a = [330, 330, 330, 330, 330, 330, 330, 330, 360, 360, 360, 360, 360, 360, 360, 360, 385, 385, 385, 385, 385, 385, 385,
        385, 385, 385, 385, 385, 385, 385, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415, 415]
    b = [1900, 2100, 1850, 1700, 1500, 2000, 2050, 1670, 2000, 1800, 1770, 1500, 2000, 1900, 2100, 1850, 1700, 1500, 2000, 2050, 1670, 2000, 1800, 1770, 1500, 2000]

    individual = CSP(a, b)
    individual.print_individual()

    for i in range(500):
        individual.ramming_mutation()
        individual.print_individual()


